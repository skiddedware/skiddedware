

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "NoobHub",
   LoadingTitle = "Checking Key...",
   LoadingSubtitle = "by DeezNutz",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },
   Discord = {
      Enabled = true,
      Invite = "https://discord.gg/HzSUyqh7", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Key System",
      Subtitle = "Key System",
      Note = "https://discord.gg/HzSUyqh7",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"NoobHubIsDecent"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Tab = Window:CreateTab("FAST KA(PAID)", "4483362458") -- Enclose the ID in quotation marks to treat it as a string

local Toggle1 = Tab:CreateToggle({
   Name = "THUNDER KA(MUST TURN BYPASS FIRST)",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
      -- The function that takes place when the toggle is pressed
      -- The variable (Value) is a boolean on whether the toggle is true or false
      if Value then
         -- Toggle is ON
         print("Toggle 1 enabled")
         -- Perform additional actions here
         while true do
            local args = {
               [1] = "ricespiritdamage",
               [2] = game:GetService("Players").LocalPlayer.Character,
               [3] = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame,
               [4] = 300
            }
  
            game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer(unpack(args))
  
            wait(0.85)
         end
      else
         -- Toggle is OFF
         print("Toggle 1 disabled")
         -- Perform additional actions here
      end
   end,
})

local Toggle2 = Tab:CreateToggle({
   Name = "THUNDER KA BYPASS",
   CurrentValue = false,
   Flag = "Toggle2", -- Change the flag to a different value to avoid overlap
   Callback = function(Value)
      -- The function that takes place when the toggle is pressed
      -- The variable (Value) is a boolean on whether the toggle is true or false
      if Value then
         -- Toggle is ON
         print("Toggle is ON")
         -- Perform additional actions here
         firing = true -- Update the firing state
         spawn(function()
            while firing do
               local args = {
                  [1] = "skil_ting_asd",
                  [2] = game:GetService("Players").LocalPlayer,
                  [3] = "Thunderbreathingrapidslashes",
                  [4] = 5
               }
  
               game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))
  
               wait(14)
            end
         end)
      else
         -- Toggle is OFF
         print("Toggle is OFF")
         -- Perform additional actions here
         firing = false -- Update the firing state
      end
   end,
})

local Toggle3 = Tab:CreateToggle({
   Name = "ARROW KA",
   CurrentValue = false,
   Flag = "Toggle3", -- Change the flag to a different value to avoid overlap
   Callback = function(Value)
      -- The function that takes place when the toggle is pressed
      -- The variable (Value) is a boolean on whether the toggle is true or false
      if Value then
         -- Toggle is ON
         print("Toggle is ON")
         -- Perform additional actions here
         running = true -- Update the running state
         spawn(function()
            while running do
               local success, error = pcall(function()
                  local hitCounter = {} -- Counter for each model

                  for i, v in next, workspace.Mobs:GetDescendants() do
                     if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") then
                        local modelId = v:GetFullName()

                        -- Check if the model has a counter and initialize it if not present
                        if not hitCounter[modelId] then
                           hitCounter[modelId] = 0
                        end

                        -- Check if the model has been hit less than 2 times
                        if hitCounter[modelId] < 2 then
                           local humanoid = v:FindFirstChildOfClass("Humanoid")
                           if humanoid and humanoid.Health > 0 then
                              local Handle_Initiate_S_ = game.ReplicatedStorage.Remotes.To_Server.Handle_Initiate_S_
                              Handle_Initiate_S_:InvokeServer("arrow_knock_back_damage", game.Players.LocalPlayer.Character, v.HumanoidRootPart.CFrame, v, 500, 500)
                              hitCounter[modelId] = hitCounter[modelId] + 1
                           else
                              -- The humanoid health is 0, change to another model
                              -- Replace the code below with the logic to change the model
                              print("Model with health 0:", modelId)
                           end
                        end

                        -- Check if we hit two mobs/models
                        local hitCount = 0
                        for _, count in pairs(hitCounter) do
                           hitCount = hitCount + count
                        end
                        if hitCount >= 2 then
                           break -- Exit the loop if we hit two mobs/models
                        end
                     end
                  end
               end)

               if not success then
                  print("An error occurred:", error)
               end

               -- Add a delay between iterations to prevent excessive server load
               wait() -- Adjust the delay time as desired
            end
         end)
      else
         -- Toggle is OFF
         print("Toggle is OFF")
         -- Perform additional actions here
         running = false -- Update the running state
      end
   end,
})

local Toggle4 = Tab:CreateToggle({
   Name = "ARROW BYPASS",
   CurrentValue = false,
   Flag = "Toggle4", -- Change the flag to a different value to avoid overlap
   Callback = function(Value)
      -- The function that takes place when the toggle is pressed
      -- The variable (Value) is a boolean on whether the toggle is true or false
      local firing = Value -- Update the firing state based on the toggle value

      if firing then
         -- Toggle is ON
         print("Toggle is ON")
         -- Perform additional actions here
         spawn(function()
            while firing do
               local Handle_Initiate_S_ = game.ReplicatedStorage.Remotes.To_Server.Handle_Initiate_S_
               Handle_Initiate_S_:InvokeServer("skil_ting_asd", game.Players.LocalPlayer, "arrow_knock_back", 5)
               wait(15)
            end
         end)
      else
         -- Toggle is OFF
         print("Toggle is OFF")
         -- Perform additional actions here
      end
   end,
})
